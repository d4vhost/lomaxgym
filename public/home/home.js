// ===== HOME LOGIC SIN EFECTO PARALLAX =====

// Configuraci√≥n del Intersection Observer para animaciones
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

// Crear el observer para animaciones de entrada
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            // Una vez visible, no necesitamos seguir observando
            observer.unobserve(entry.target);
        }
    });
}, observerOptions);

// Gesti√≥n del tema oscuro/claro
class ThemeManager {
    constructor() {
        this.themeToggle = document.getElementById('themeToggle');
        this.currentTheme = localStorage.getItem('theme') || 'light';
        this.init();
    }

    init() {
        // Aplicar tema guardado
        this.applyTheme(this.currentTheme);
        
        // Event listener para el bot√≥n de toggle
        if (this.themeToggle) {
            this.themeToggle.addEventListener('click', () => {
                this.toggleTheme();
            });
        }

        // Detectar preferencia del sistema
        if (!localStorage.getItem('theme')) {
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            if (prefersDark) {
                this.currentTheme = 'dark';
                this.applyTheme('dark');
            }
        }

        // Escuchar cambios en la preferencia del sistema
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
            if (!localStorage.getItem('theme')) {
                this.currentTheme = e.matches ? 'dark' : 'light';
                this.applyTheme(this.currentTheme);
            }
        });
    }

    toggleTheme() {
        this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';
        this.applyTheme(this.currentTheme);
        localStorage.setItem('theme', this.currentTheme);
        
        // Animaci√≥n del bot√≥n
        if (this.themeToggle) {
            this.themeToggle.style.transform = 'scale(0.9)';
            setTimeout(() => {
                this.themeToggle.style.transform = 'scale(1)';
            }, 150);
        }

        // Mostrar notificaci√≥n
        mostrarNotificacion(
            `Modo ${this.currentTheme === 'dark' ? 'oscuro' : 'claro'} activado`,
            'info'
        );
    }

    applyTheme(theme) {
        if (theme === 'dark') {
            document.documentElement.setAttribute('data-theme', 'dark');
        } else {
            document.documentElement.removeAttribute('data-theme');
        }
        this.currentTheme = theme;
    }
}

// Funci√≥n para mejorar el rendimiento del scroll con throttle
function throttle(func, limit) {
    let inThrottle;
    return function() {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    }
}

// Funci√≥n para detectar cuando la navegaci√≥n debe cambiar de estilo
function handleNavigationScroll() {
    const nav = document.querySelector('nav');
    const scrolled = window.pageYOffset;
    const currentTheme = document.documentElement.getAttribute('data-theme');
    
    if (scrolled > 100) {
        if (currentTheme === 'dark') {
            nav.style.background = 'rgba(0, 0, 0, 0.95)';
        } else {
            nav.style.background = 'rgba(255, 255, 255, 0.95)';
        }
        nav.style.boxShadow = '0 2px 20px var(--shadow-light)';
    } else {
        if (currentTheme === 'dark') {
            nav.style.background = 'rgba(0, 0, 0, 0.8)';
        } else {
            nav.style.background = 'rgba(255, 255, 255, 0.8)';
        }
        nav.style.boxShadow = 'none';
    }
}

// Funci√≥n para animar contadores
function animateCounter(element, target, duration = 2000) {
    let start = 0;
    const increment = target / (duration / 16);
    
    function updateCounter() {
        start += increment;
        if (start < target) {
            element.textContent = Math.ceil(start);
            requestAnimationFrame(updateCounter);
        } else {
            element.textContent = target;
        }
    }
    
    updateCounter();
}

// Funci√≥n para suavizar el scroll a secciones
function smoothScrollToSection(targetId) {
    const target = document.getElementById(targetId);
    if (target) {
        const navHeight = document.querySelector('nav').offsetHeight;
        const targetPosition = target.getBoundingClientRect().top + window.pageYOffset - navHeight;
        
        window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
        });
    }
}

// Funci√≥n para precargar im√°genes
function preloadImages() {
    const images = document.querySelectorAll('img[src]');
    images.forEach(img => {
        const imageLoader = new Image();
        imageLoader.src = img.src;
    });
}

// ===== FUNCIONES ORIGINALES DE LOMAX =====

// Funci√≥n para mostrar saludo personalizado
function mostrarSaludo(nombre) {
    const saludos = [
        `¬°Hola de nuevo, ${nombre}! ¬øListo para entrenar? üí™`,
        `${nombre}, sigue d√°ndolo todo. Tu esfuerzo vale la pena.`,
        `¬°Bienvenido otra vez, ${nombre}! A por un nuevo reto.`,
        `¬°Excelente d√≠a para entrenar, ${nombre}! üî•`,
        `${nombre}, cada d√≠a eres m√°s fuerte. ¬°Sigamos! üíØ`,
        `¬°Hora de brillar, ${nombre}! Tu momento es ahora üåü`,
        `${nombre}, hoy es perfecto para superar tus l√≠mites üöÄ`
    ];
    const aleatorio = saludos[Math.floor(Math.random() * saludos.length)];
    
    const bienvenidaEl = document.getElementById("bienvenida");
    if (bienvenidaEl) {
        // Animaci√≥n de cambio de texto
        bienvenidaEl.style.opacity = '0';
        bienvenidaEl.style.transform = 'translateY(-10px)';
        
        setTimeout(() => {
            bienvenidaEl.textContent = aleatorio;
            bienvenidaEl.style.opacity = '1';
            bienvenidaEl.style.transform = 'translateY(0)';
        }, 300);
    }
}

// Funci√≥n para cargar resumen del d√≠a
async function cargarResumenDelDia(userId) {
    try {
        await cargarResumenRutina(userId);
        await cargarResumenNutricion(userId);
        await cargarDiasActivo(userId);
    } catch (error) {
        console.error("Error al cargar resumen del d√≠a:", error);
    }
}

// Funci√≥n para cargar resumen de rutina
async function cargarResumenRutina(userId) {
    const hoy = new Date();
    const diaHoy = ["Domingo", "Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado"][hoy.getDay()];
    const descripcionRutina = document.getElementById("descripcion-rutina");

    if (!descripcionRutina) return;

    try {
        if (diaHoy === "S√°bado" || diaHoy === "Domingo") {
            descripcionRutina.textContent = "D√≠a de descanso üõå - Disfruta tu tiempo libre";
            return;
        }

        // Verificar si el usuario tiene gu√≠a
        const guias = await fetch("https://gymlomax-backend-api-grarfsd8hme6bjbc.canadacentral-01.azurewebsites.net/api/GuiaNutricionals").then(r => r.json());
        const guiaUsuario = guias.find(g => g.idUsuario === userId);
        
        if (!guiaUsuario) {
            descripcionRutina.textContent = "Completa tu perfil para ver tu rutina";
            return;
        }

        // Cargar rutinas desde JSON para obtener descripci√≥n
        const data = await fetch("../data/rutinas-entrenamiento.json").then(r => r.json());
        const objetivo = guiaUsuario.objetivo;
        
        let rutina = data.rutinas[objetivo] || data.rutinas["Ganar masa muscular"];
        const ejerciciosHoy = rutina.dias.find(d => d.dia === diaHoy);
        
        if (ejerciciosHoy) {
            descripcionRutina.textContent = `${ejerciciosHoy.grupoMuscular} - ${ejerciciosHoy.ejercicios.length} ejercicios`;
        } else {
            descripcionRutina.textContent = "No hay rutina programada para hoy";
        }

    } catch (error) {
        console.error("Error al cargar resumen de rutina:", error);
        descripcionRutina.textContent = "Error al cargar rutina";
    }
}

// Funci√≥n para cargar resumen de nutrici√≥n
async function cargarResumenNutricion(userId) {
    const descripcionNutricion = document.getElementById("descripcion-nutricion");

    if (!descripcionNutricion) return;

    try {
        // Verificar membres√≠a
        const membresias = await fetch("https://gymlomax-backend-api-grarfsd8hme6bjbc.canadacentral-01.azurewebsites.net/api/Membresias").then(r => r.json());
        const miembro = membresias.find(m => m.idUsuario === userId);
        const tipoMembresia = miembro?.tipoMembresia?.nombre || "B√°sico";

        if (tipoMembresia === "B√°sico") {
            descripcionNutricion.textContent = "Actualiza tu plan para acceder";
            return;
        }

        const hoy = new Date();
        const diaHoy = ["Domingo", "Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado"][hoy.getDay()];

        if (diaHoy === "S√°bado" || diaHoy === "Domingo") {
            descripcionNutricion.textContent = "D√≠a libre - Disfruta con moderaci√≥n ‚òï";
            return;
        }

        // Verificar si tiene gu√≠a nutricional
        const guias = await fetch("https://gymlomax-backend-api-grarfsd8hme6bjbc.canadacentral-01.azurewebsites.net/api/GuiaNutricionals").then(r => r.json());
        const guiaUsuario = guias.find(g => g.idUsuario === userId);
        
        if (!guiaUsuario) {
            descripcionNutricion.textContent = "Completa tu perfil nutricional";
            return;
        }

        descripcionNutricion.textContent = `Plan ${tipoMembresia} - Desayuno, almuerzo y merienda`;

    } catch (error) {
        console.error("Error al cargar resumen de nutrici√≥n:", error);
        descripcionNutricion.textContent = "Error al cargar plan nutricional";
    }
}

// Funci√≥n para calcular d√≠as activo
async function cargarDiasActivo(userId) {
    const diasEl = document.getElementById("dias-activo");
    if (!diasEl) return;

    try {
        const usuarios = await fetch("https://gymlomax-backend-api-grarfsd8hme6bjbc.canadacentral-01.azurewebsites.net/api/UsuariosApi").then(r => r.json());
        const usuario = usuarios.find(u => u.idUsuario === userId);
        
        if (usuario && usuario.fechaRegistro) {
            const fechaRegistro = new Date(usuario.fechaRegistro);
            const hoy = new Date();
            const diffTime = Math.abs(hoy - fechaRegistro);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            // Animar el contador
            animateCounter(diasEl, diffDays, 1500);
        } else {
            diasEl.textContent = "1";
        }
    } catch (error) {
        console.error("Error al cargar d√≠as activo:", error);
        diasEl.textContent = "0";
    }
}

// Funci√≥n para cargar frase motivacional
function cargarFraseMotivacional() {
    const frases = [
        "¬°Cada d√≠a es una nueva oportunidad para ser mejor!",
        "El √©xito no se logra solo con cualidades especiales. Es sobre todo un trabajo de constancia.",
        "Tu √∫nico l√≠mite eres t√∫ mismo. ¬°R√≥mpelo!",
        "No se trata de ser perfecto, se trata de ser mejor que ayer.",
        "El dolor que sientes hoy ser√° la fuerza que sentir√°s ma√±ana.",
        "Cada repetici√≥n te acerca m√°s a tu objetivo.",
        "La disciplina es elegir entre lo que quieres ahora y lo que quieres m√°s.",
        "No dejes que lo que no puedes hacer interfiera con lo que s√≠ puedes hacer.",
        "El cuerpo logra lo que la mente cree posible.",
        "Champions train, losers complain. ¬øQu√© eliges ser hoy?"
    ];

    const fraseAleatoria = frases[Math.floor(Math.random() * frases.length)];
    const fraseEl = document.getElementById("frase-dia");
    
    if (fraseEl) {
        fraseEl.textContent = fraseAleatoria;
    }
}

// Funci√≥n para configurar event listeners del men√∫
function setupMenuEventListeners() {
    const userProfile = document.getElementById("user-profile");
    const userDropdown = document.getElementById("user-dropdown");

    if (userProfile && userDropdown) {
        userProfile.addEventListener("click", function (e) {
            userDropdown.classList.toggle("active");
            e.stopPropagation();
            
            // Animaci√≥n del avatar
            const avatar = userProfile.querySelector('.user-avatar');
            if (avatar) {
                avatar.style.transform = "scale(0.95)";
                setTimeout(() => {
                    avatar.style.transform = "scale(1)";
                }, 100);
            }
        });

        document.addEventListener("click", function (e) {
            if (!userProfile.contains(e.target)) {
                userDropdown.classList.remove("active");
            }
        });

        // Cerrar dropdown con Escape
        document.addEventListener("keydown", function(e) {
            if (e.key === "Escape") {
                userDropdown.classList.remove("active");
            }
        });
    }
}

// Funci√≥n para mostrar notificaci√≥n temporal
function mostrarNotificacion(mensaje, tipo = 'info') {
    const notificacion = document.createElement('div');
    notificacion.style.cssText = `
        position: fixed; top: 20px; right: 20px; z-index: 9999;
        padding: 1rem 1.5rem; border-radius: 12px; color: white;
        font-weight: 500; box-shadow: 0 8px 32px rgba(0,0,0,0.2);
        transform: translateX(400px); transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px);
        border: 1px solid rgba(255,255,255,0.1);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    `;
    
    // Colores seg√∫n tipo
    const colores = {
        'info': 'linear-gradient(135deg, #007AFF 0%, #5856d6 100%)',
        'success': 'linear-gradient(135deg, #34c759 0%, #30d158 100%)',
        'warning': 'linear-gradient(135deg, #ff9500 0%, #ffcc02 100%)',
        'error': 'linear-gradient(135deg, #ff3b30 0%, #ff6961 100%)'
    };
    
    notificacion.style.background = colores[tipo] || colores.info;
    notificacion.textContent = mensaje;
    
    document.body.appendChild(notificacion);
    
    // Animaci√≥n de entrada
    setTimeout(() => {
        notificacion.style.transform = 'translateX(0)';
    }, 100);
    
    // Remover despu√©s de 4 segundos
    setTimeout(() => {
        notificacion.style.transform = 'translateX(400px)';
        notificacion.style.opacity = '0';
        setTimeout(() => {
            if (notificacion.parentElement) {
                notificacion.remove();
            }
        }, 400);
    }, 4000);
}

// Funci√≥n para manejar errores de conexi√≥n
function manejarErrorConexion(error) {
    console.error("Error de conexi√≥n:", error);
    mostrarNotificacion("Error de conexi√≥n con el servidor", "error");
}

// Funci√≥n principal de inicializaci√≥n
async function init() {
    // Inicializar gestor de temas
    new ThemeManager();
    
    // Observar todos los elementos con clases de animaci√≥n
    const animatedElements = document.querySelectorAll(
        '.fade-in-up, .fade-in-left, .fade-in-right, .scale-in'
    );
    
    animatedElements.forEach(el => {
        observer.observe(el);
    });

    // Configurar solo el scroll de navegaci√≥n (SIN PARALLAX)
    const throttledNavScroll = throttle(handleNavigationScroll, 16);
    window.addEventListener('scroll', throttledNavScroll);

    // A√±adir efecto de hover mejorado a las cards
    const accesoCards = document.querySelectorAll('.acceso-card');
    accesoCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-12px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });

    // Mejorar la navegaci√≥n con indicaci√≥n visual
    const navLinks = document.querySelectorAll('.nav-links a');
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            // Remover clase active de todos los links
            navLinks.forEach(l => l.classList.remove('active'));
            // A√±adir clase active al link clickeado
            this.classList.add('active');
        });
    });

    // A√±adir efectos al bot√≥n CTA
    const ctaButton = document.querySelector('.cta-button');
    if (ctaButton) {
        ctaButton.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px) scale(1.05)';
            this.style.boxShadow = '0 10px 30px rgba(0, 122, 255, 0.4)';
        });
        
        ctaButton.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(-1px) scale(1)';
            this.style.boxShadow = '0 8px 25px rgba(0, 122, 255, 0.3)';
        });
    }

    // Precargar im√°genes para mejor UX
    preloadImages();

    // Event listeners del men√∫
    setupMenuEventListeners();

    // ===== L√ìGICA ORIGINAL DE LOMAX =====
    const userId = parseInt(sessionStorage.getItem("usuarioId"));
    const nombre = sessionStorage.getItem("usuarioNombre");

    if (!userId || !nombre) {
        window.location.href = "../login/login.html";
        return;
    }

    try {
        const usuarios = await fetch("https://gymlomax-backend-api-grarfsd8hme6bjbc.canadacentral-01.azurewebsites.net/api/UsuariosApi").then(r => r.json());
        const usuarioActual = usuarios.find(u => u.idUsuario === userId);
        if (usuarioActual) {
            console.log("Datos actualizados del usuario desde API:", usuarioActual);
        }
    } catch (error) {
        console.error("Error al obtener datos actualizados del usuario:", error);
        manejarErrorConexion(error);
    }

    document.getElementById("bienvenida").textContent = `Bienvenido a LoMax, ${nombre}`;

    try {
        const guias = await fetch("https://gymlomax-backend-api-grarfsd8hme6bjbc.canadacentral-01.azurewebsites.net/api/GuiaNutricionals").then(r => r.json());
        const tieneGuia = guias.some(g => g.idUsuario === userId);

        if (!tieneGuia) {
            // TODOS deben completar el modal, sin importar el plan
            // Usar la funci√≥n global del modal
            if (typeof mostrarModalNutricional === 'function') {
                mostrarModalNutricional(userId, nombre, async (resultado) => {
                    // Callback que se ejecuta despu√©s de guardar la gu√≠a
                    mostrarSaludo(nombre);
                    await cargarResumenDelDia(userId);
                });
            } else {
                mostrarSaludo(nombre);
                await cargarResumenDelDia(userId);
            }
        } else {
            // Si ya tiene gu√≠a, mostrar contenido
            mostrarSaludo(nombre);
            await cargarResumenDelDia(userId);
        }

    } catch (e) {
        console.error("Error al cargar gu√≠a:", e);
        manejarErrorConexion(e);
    }

    // Cargar frase motivacional
    cargarFraseMotivacional();

    // A√±adir clase loaded al body para transiciones de entrada
    setTimeout(() => {
        document.body.classList.add('loaded');
    }, 100);
}

// Funci√≥n para limpiar event listeners cuando sea necesario
function cleanup() {
    window.removeEventListener('scroll', handleNavigationScroll);
    observer.disconnect();
}

// Event listeners principales
document.addEventListener('DOMContentLoaded', init);

// Manejo del estado de la p√°gina al cargar/salir
window.addEventListener('beforeunload', cleanup);

// Event listener para manejar errores de red globalmente
window.addEventListener('unhandledrejection', event => {
    if (event.reason && event.reason.message && event.reason.message.includes('fetch')) {
        manejarErrorConexion(event.reason);
        event.preventDefault();
    }
});

// Prevenir comportamientos por defecto en ciertos casos
document.addEventListener('dragstart', function(e) {
    if (e.target.tagName === 'IMG') {
        e.preventDefault();
    }
});

// Mejorar accesibilidad con navegaci√≥n por teclado
document.addEventListener('keydown', function(e) {
    if (e.key === 'Tab') {
        document.body.classList.add('using-keyboard');
    }
});

document.addEventListener('mousedown', function() {
    document.body.classList.remove('using-keyboard');
});

// Exportar funciones para uso externo si es necesario
window.LoMaxApp = {
    smoothScrollToSection,
    animateCounter,
    mostrarNotificacion,
    init,
    cleanup
};